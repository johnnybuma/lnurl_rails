<div id="difficulty-numtxs-chart" style="width:100%; height:400px;"></div>


<div class="container mt-4">
  <h2>Block History Data</h2>
  <div class="table-responsive">
    <table id="blockHistoryTable" class="table table-bordered table-hover">
      <thead class="table-dark">
      <tr>
        <th scope="col">Block Number</th>
        <th scope="col">Difficulty</th>
        <th scope="col">Number of Transactions</th>
        <th scope="col">Block Size (MB)</th>
      </tr>
      </thead>
      <tbody>
      <% @chart_data.each do |data| %>
        <tr>
          <td><%= data[0] %></td>
          <td>

            <%= data[1] %>

          </td>
          <td>
            <%= data[2] %>

            <% block = BlockHistory.where(block_number: data[0]).first
               data = JSON.parse(block.data)
               response = data['result'] || {}
               transactions = response['tx'] || []

            %>
            <%= transactions %>

          </td>
          <td><%= data[3] %></td>
        </tr>
      <% end %>
      </tbody>
    </table>
  </div>
</div>


<script>
  $(document).ready(function () {
      let table = new DataTable('#blockHistoryTable');

  });
</script>

<script>
    $(document).on('ready turbo:frame-load', function (event) {

        let table = new DataTable('#blockHistoryTable');


        if (event.target.id === 'block_chart') {
            var chartData = <%= @chart_data.to_json.html_safe %>;

            var currentBatch = 0;

            var difficultyData = chartData.map(function(item) { return [item[0], item[1]]; });
            var numtxsData = chartData.map(function(item) { return [item[0], item[2]]; });
            var blockSizeData = chartData.map(function(item) { return [item[0], item[3]]; });

            let chart = Highcharts.chart('difficulty-numtxs-chart', {
                chart: {
                    zoomType: 'x',
                    type: 'column' // Default to column, but this will be overridden per series

                },
                title: {
                    text: 'Difficulty vs Number of Txs vs Size'
                },
                xAxis: {
                    type: 'linear', // Changed to linear
                    title: {
                        text: 'Block Number'
                    }
                },
                yAxis: [{
                    title: {
                        text: 'Difficulty'
                    }
                }, {
                    title: {
                        text: 'Number of Txs'
                    },
                    opposite: true
                }, {
                    title: {
                        text: 'Block Size MB'
                    },
                    opposite: true
                }],
                plotOptions: {
                    series: {
                        turboThreshold: 0, // No limit on the number of data points
                        marker: {
                            enabled: false
                        }
                    }
                },
                tooltip: {
                    shared: true,
                    formatter: function () {
                        var tooltipText = '<b>Block Number: ' + this.x + '</b><br/>';
                        this.points.forEach(function(point) {
                            tooltipText += point.series.name + ': ' + point.y + '<br/>';
                        });
                        return tooltipText;
                    }
                },
                series: [{
                    type: 'line', // Line chart for Difficulty
                    name: 'Difficulty',
                    data: difficultyData,
                    zIndex: 2
                }, {
                    type: 'line', // Column chart for Number of Txs
                    name: 'Number Txs',
                    yAxis: 1,
                    data: numtxsData,
                    zIndex: 1 // Lower zIndex for Number Txs

                }, {
                    type: 'line', // Column chart for Number of Txs
                    name: 'Blocksize',
                    yAxis: 2,
                    data: blockSizeData,
                    zIndex: 0 // Ensure Difficulty is on top
                }]
                // Rest of the chart configuration
            });

            hideLoadingIndicator();

            function showLoadingIndicator() {
                document.getElementById('loadingIndicator').style.display = 'block';
            }

            function hideLoadingIndicator() {
                document.getElementById('loadingIndicator').style.display = 'none';
            }


            function updateTable(batchData) {
                batchData.forEach(function(item) {
                    let newRow = table.row.add([
                        item[0].toString(), // Block Number
                        item[1].toString(), // Difficulty
                        item[2].toString(), // Number of Transactions
                        item[3].toString()  // Block Size (MB)
                    ]).node();
                    $(newRow).addClass('newly-added-row'); // Optional: Add a class to new rows
                });
                table.draw(false); // Redraw the table without resetting the paging
            }

            function updateChart(batchData) {
                batchData.forEach(function(item) {
                    chart.series[0].addPoint([item[0], item[1]], false);
                    console.log(chart.series[0].addPoint([item[0], item[1]], false));
                    chart.series[1].addPoint([item[0], item[2]], false);
                    chart.series[2].addPoint([item[0], item[3]], false);
                });
                chart.redraw();
            }

            function loadBatch() {
                currentBatch++;
                showLoadingIndicator();
                $.ajax({
                    url: '<%= block_histories_path %>',
                    data: {
                        start_block: <%= params[:start_block] %>,
                        end_block: <%= params[:end_block] %>,
                        batch_number: currentBatch
                    },
                    dataType: 'json',
                    success: function(currentBatch) {
                        console.log(currentBatch);
                        updateTable(currentBatch);
                        updateChart(currentBatch);

                        hideLoadingIndicator();


                    },
                    error: function() {
                        hideLoadingIndicator();
                    }
                });
            }

            document.getElementById('loadMore').addEventListener('click', loadBatch);
        }
    });
</script>
